# Multi-stage build for Parent App
FROM node:20-alpine AS build

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY nx.json ./
COPY tsconfig.base.json ./

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Build the parent app for production
RUN npx nx build parent-app --prod

# Production stage with nginx
FROM nginx:alpine AS production

# Copy custom nginx configuration
COPY docker/nginx/parent-app.conf /etc/nginx/conf.d/default.conf

# Copy built application
COPY --from=build /app/dist/parent-app /usr/share/nginx/html

# Copy environment configuration script
COPY docker/scripts/env-config.sh /docker-entrypoint.d/env-config.sh
RUN chmod +x /docker-entrypoint.d/env-config.sh

# Create nginx user
RUN addgroup -g 1001 -S nginx
RUN adduser -S nginx -u 1001

# Ensure proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html
RUN chown -R nginx:nginx /var/cache/nginx
RUN chown -R nginx:nginx /var/log/nginx

# Create runtime configuration
RUN touch /usr/share/nginx/html/config.js && \
    chown nginx:nginx /usr/share/nginx/html/config.js

USER nginx

EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1

CMD ["nginx", "-g", "daemon off;"]